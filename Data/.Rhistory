#get rid of zero and create mncode
age$mnname <- str_replace(age$mnname, "^0+(?=[1-9])", "")
#extract numbers from mnname column and store in mncode column
age$mncode <- as.numeric(str_extract(age$mnname, "\\d+"))
age$mnname <- str_replace(age$mnname, "\\d+\\s*", "")
###add age to main
# Create composite keys for data_wide and party_wide
data_wide$composite_key5 <- paste(data_wide$mncode, data_wide$year, sep = "_")
age$composite_key5 <- paste(age$mncode, age$age_year, sep = "_")
# Match based on the composite key
matches_age <- match(data_wide$composite_key5, age$composite_key5)
# Add matched columns from party_wide to data_wide
data_wide$age_total <- age$age_total[matches_age]
data_wide$`0-17` <- age$`0-17`[matches_age]
data_wide$`18-30` <- age$`18-30`[matches_age]
data_wide$`31-45` <- age$`31-45`[matches_age]
data_wide$`46-65` <- age$`46-65`[matches_age]
data_wide$`66-85` <- age$`66-85`[matches_age]
data_wide$`86-100` <- age$`86-100`[matches_age]
data_wide$`p_0-17` <- age$`p_0-17`[matches_age]
data_wide$`p_18-30` <- age$`p_18-30`[matches_age]
data_wide$`p_31-45` <- age$`p_31-45`[matches_age]
data_wide$`p_46-65` <- age$`p_46-65`[matches_age]
data_wide$`p_66-85` <- age$`p_66-85`[matches_age]
data_wide$`p_86-100` <- age$`p_86-100`[matches_age]
# Create composite keys for data_wide and party_wide
data_wide$composite_key6 <- paste(data_wide$municipality, data_wide$year, sep = "_")
age$composite_key6 <- paste(age$mnname, age$age_year, sep = "_")
# Match based on the composite key
matches_age2 <- match(data_wide$composite_key6, age$composite_key6)
# Add matched columns from party_wide to data_wide only where there are NAs in data_wide
data_wide$age_total[is.na(data_wide$age_total)] <- age$age_total[matches_age2][is.na(data_wide$age_total)]
data_wide$`0-17`[is.na(data_wide$`0-17`)] <- age$`0-17`[matches_age2][is.na(data_wide$`0-17`)]
data_wide$`18-30`[is.na(data_wide$`18-30`)] <- age$`18-30`[matches_age2][is.na(data_wide$`18-30`)]
data_wide$`31-45`[is.na(data_wide$`31-45`)] <- age$`31-45`[matches_age2][is.na(data_wide$`31-45`)]
data_wide$`46-65`[is.na(data_wide$`46-65`)] <- age$`46-65`[matches_age2][is.na(data_wide$`46-65`)]
data_wide$`66-85`[is.na(data_wide$`66-85`)] <- age$`66-85`[matches_age2][is.na(data_wide$`66-85`)]
data_wide$`86-100`[is.na(data_wide$`86-100`)] <- age$`86-100`[matches_age2][is.na(data_wide$`86-100`)]
data_wide$`p_0-17`[is.na(data_wide$`p_0-17`)] <- age$`p_0-17`[matches_age2][is.na(data_wide$`p_0-17`)]
data_wide$`p_18-30`[is.na(data_wide$`p_18-30`)] <- age$`p_18-30`[matches_age2][is.na(data_wide$`p_18-30`)]
data_wide$`p_31-45`[is.na(data_wide$`p_31-45`)] <- age$`p_31-45`[matches_age2][is.na(data_wide$`p_31-45`)]
data_wide$`p_46-65`[is.na(data_wide$`p_46-65`)] <- age$`p_46-65`[matches_age2][is.na(data_wide$`p_46-65`)]
data_wide$`p_66-85`[is.na(data_wide$`p_66-85`)] <- age$`p_66-85`[matches_age2][is.na(data_wide$`p_66-85`)]
data_wide$`p_86-100`[is.na(data_wide$`p_86-100`)] <- age$`p_86-100`[matches_age2][is.na(data_wide$`p_86-100`)]
#na rows with NA values in the specified columns
na_rows_age <- which(is.na(data_wide$`p_86-100`))
#creating a new dataset with only NA rows from data_wide
data_wide_na_age <- data_wide[na_rows_age, ]
#fuzzy to perform fuzzy matching based on Jaccard similarity
fuzzy_match_jaccard <- function(x, y) {
distances <- stringdist::stringdistmatrix(x, y, method = "jaccard")
# Find the index of the minimum distance for each row
index <- apply(distances, 1, which.min)
# Extract the corresponding values from y
matched_values <- y[index]
return(matched_values)
}
#looping through each row of data_wide_na and fill NA values
for (i in 1:nrow(data_wide_na_age)) {
# Extract municipality and year from data_wide_na
municipality <- data_wide_na_age$municipality[i]
year <- data_wide_na_age$year[i]
# Perform fuzzy match for municipality and year
matched_row <- age[age$age_year == year, ]
matched_municipality <- fuzzy_match_jaccard(municipality, matched_row$mnname)
# Update data_wide with matched values only where there are NA values
if (!is.na(matched_municipality)) {
data_wide$age_total[na_rows_age[i]] <- matched_row$age_total[matched_row$mnname == matched_municipality]
data_wide$`0-17`[na_rows_age[i]] <- matched_row$`0-17`[matched_row$mnname == matched_municipality]
data_wide$`18-30`[na_rows_age[i]] <- matched_row$`18-30`[matched_row$mnname == matched_municipality]
data_wide$`31-45`[na_rows_age[i]] <- matched_row$`31-45`[matched_row$mnname == matched_municipality]
data_wide$`46-65`[na_rows_age[i]] <- matched_row$`46-65`[matched_row$mnname == matched_municipality]
data_wide$`66-85`[na_rows_age[i]] <- matched_row$`66-85`[matched_row$mnname == matched_municipality]
data_wide$`86-100`[na_rows_age[i]] <- matched_row$`86-100`[matched_row$mnname == matched_municipality]
data_wide$`p_0-17`[na_rows_age[i]] <- matched_row$`p_0-17`[matched_row$mnname == matched_municipality]
data_wide$`p_18-30`[na_rows_age[i]] <- matched_row$`p_18-30`[matched_row$mnname == matched_municipality]
data_wide$`p_31-45`[na_rows_age[i]] <- matched_row$`p_31-45`[matched_row$mnname == matched_municipality]
data_wide$`p_46-65`[na_rows_age[i]] <- matched_row$`p_46-65`[matched_row$mnname == matched_municipality]
data_wide$`p_66-85`[na_rows_age[i]] <- matched_row$`p_66-85`[matched_row$mnname == matched_municipality]
data_wide$`p_86-100`[na_rows_age[i]] <- matched_row$`p_86-100`[matched_row$mnname == matched_municipality]
}
}
#checking for na
which(is.na(data_wide$`p_86-100`))
###gender and religion per municipality 2000
gender_religion <- read.xlsx('Data_Sources/data_gender_religion.xlsx')
#compute proportions for each group
gender_religion <- gender_religion %>%
mutate(
p_chchm_total = (chchm_total / chch_total) * 100,
p_chchm_protest = (chchm_protest / chchm_total) * 100,
p_chchm_romancath = (chchm_romancath / chchm_total) * 100,
p_chchm_christcath = (chchm_christcath / chchm_total) * 100,
p_chchm_christortho = (chchm_christortho / chchm_total) * 100,
p_chchm_christother = (chchm_christother / chchm_total) * 100,
p_chchm_jewish = (chchm_jewish / chchm_total) * 100,
p_chchm_muslim = (chchm_muslim / chchm_total) * 100,
p_chchm_religionother = (chchm_religionother / chchm_total) * 100,
p_chchm_atheist = (chchm_atheist / chchm_total) * 100,
p_chchm_religion_undisclosed = (chchm_religion_undisclosed / chchm_total) * 100,
p_chchf_total = (chchf_total / chch_total) * 100,
p_chchf_protest = (chchf_protest / chchf_total) * 100,
p_chchf_romancath = (chchf_romancath / chchf_total) * 100,
p_chchf_christcath = (chchf_christcath / chchf_total) * 100,
p_chchf_christortho = (chchf_christortho / chchf_total) * 100,
p_chchf_christother = (chchf_christother / chchf_total) * 100,
p_chchf_jewish = (chchf_jewish / chchf_total) * 100,
p_chchf_muslim = (chchf_muslim / chchf_total) * 100,
p_chchf_religionother = (chchf_religionother / chchf_total) * 100,
p_chchf_atheist = (chchf_atheist / chchf_total) * 100,
p_chchf_religion_undisclosed = (chchf_religion_undisclosed / chchf_total) * 100
)
#get rid of zero and create mncode
gender_religion$mnname <- str_replace(gender_religion$mnname, "^0+(?=[1-9])", "")
#extract numbers from mnname column and store in mncode column
gender_religion$mncode <- as.numeric(str_extract(gender_religion$mnname, "\\d+"))
gender_religion$mnname <- str_replace(gender_religion$mnname, "\\d+\\s*", "")
#match based on the composite key
matches_gerel <- match(data_wide$mncode, gender_religion$mncode)
#matched proportions from gender_religion to data_wide
data_wide$p_chchm_total <- gender_religion$p_chchm_total[matches_gerel]
data_wide$p_chchm_protest <- gender_religion$p_chchm_protest[matches_gerel]
data_wide$p_chchm_romancath <- gender_religion$p_chchm_romancath[matches_gerel]
data_wide$p_chchm_christcath <- gender_religion$p_chchm_christcath[matches_gerel]
data_wide$p_chchm_christortho <- gender_religion$p_chchm_christortho[matches_gerel]
data_wide$p_chchm_christother <- gender_religion$p_chchm_christother[matches_gerel]
data_wide$p_chchm_jewish <- gender_religion$p_chchm_jewish[matches_gerel]
data_wide$p_chchm_muslim <- gender_religion$p_chchm_muslim[matches_gerel]
data_wide$p_chchm_religionother <- gender_religion$p_chchm_religionother[matches_gerel]
data_wide$p_chchm_atheist <- gender_religion$p_chchm_atheist[matches_gerel]
data_wide$p_chchm_religion_undisclosed <- gender_religion$p_chchm_religion_undisclosed[matches_gerel]
data_wide$p_chchf_total <- gender_religion$p_chchf_total[matches_gerel]
data_wide$p_chchf_protest <- gender_religion$p_chchf_protest[matches_gerel]
data_wide$p_chchf_romancath <- gender_religion$p_chchf_romancath[matches_gerel]
data_wide$p_chchf_christcath <- gender_religion$p_chchf_christcath[matches_gerel]
data_wide$p_chchf_christortho <- gender_religion$p_chchf_christortho[matches_gerel]
data_wide$p_chchf_christother <- gender_religion$p_chchf_christother[matches_gerel]
data_wide$p_chchf_jewish <- gender_religion$p_chchf_jewish[matches_gerel]
data_wide$p_chchf_muslim <- gender_religion$p_chchf_muslim[matches_gerel]
data_wide$p_chchf_religionother <- gender_religion$p_chchf_religionother[matches_gerel]
data_wide$p_chchf_atheist <- gender_religion$p_chchf_atheist[matches_gerel]
data_wide$p_chchf_religion_undisclosed <- gender_religion$p_chchf_religion_undisclosed[matches_gerel]
#checking for nas
which(is.na(data_wide$p_chchf_atheist))
#match based on the composite key for municipality
matches_municipality <- match(data_wide$municipality, gender_religion$mnname)
#update matched columns from old_data to data_wide only where they haven't been matched yet
data_wide$p_chchm_total[is.na(data_wide$p_chchm_total)] <- gender_religion$p_chchm_total[matches_municipality][is.na(data_wide$p_chchm_total)]
data_wide$p_chchm_protest[is.na(data_wide$p_chchm_protest)] <- gender_religion$p_chchm_protest[matches_municipality][is.na(data_wide$p_chchm_protest)]
data_wide$p_chchm_romancath[is.na(data_wide$p_chchm_romancath)] <- gender_religion$p_chchm_romancath[matches_municipality][is.na(data_wide$p_chchm_romancath)]
data_wide$p_chchm_christcath[is.na(data_wide$p_chchm_christcath)] <- gender_religion$p_chchm_christcath[matches_municipality][is.na(data_wide$p_chchm_christcath)]
data_wide$p_chchm_christortho[is.na(data_wide$p_chchm_christortho)] <- gender_religion$p_chchm_christortho[matches_municipality][is.na(data_wide$p_chchm_christortho)]
data_wide$p_chchm_christother[is.na(data_wide$p_chchm_christother)] <- gender_religion$p_chchm_christother[matches_municipality][is.na(data_wide$p_chchm_christother)]
data_wide$p_chchm_jewish[is.na(data_wide$p_chchm_jewish)] <- gender_religion$p_chchm_jewish[matches_municipality][is.na(data_wide$p_chchm_jewish)]
data_wide$p_chchm_muslim[is.na(data_wide$p_chchm_muslim)] <- gender_religion$p_chchm_muslim[matches_municipality][is.na(data_wide$p_chchm_muslim)]
data_wide$p_chchm_religionother[is.na(data_wide$p_chchm_religionother)] <- gender_religion$p_chchm_religionother[matches_municipality][is.na(data_wide$p_chchm_religionother)]
data_wide$p_chchm_atheist[is.na(data_wide$p_chchm_atheist)] <- gender_religion$p_chchm_atheist[matches_municipality][is.na(data_wide$p_chchm_atheist)]
data_wide$p_chchm_religion_undisclosed[is.na(data_wide$p_chchm_religion_undisclosed)] <- gender_religion$p_chchm_religion_undisclosed[matches_municipality][is.na(data_wide$p_chchm_religion_undisclosed)]
data_wide$p_chchf_total[is.na(data_wide$p_chchf_total)] <- gender_religion$p_chchf_total[matches_municipality][is.na(data_wide$p_chchf_total)]
data_wide$p_chchf_protest[is.na(data_wide$p_chchf_protest)] <- gender_religion$p_chchf_protest[matches_municipality][is.na(data_wide$p_chchf_protest)]
data_wide$p_chchf_romancath[is.na(data_wide$p_chchf_romancath)] <- gender_religion$p_chchf_romancath[matches_municipality][is.na(data_wide$p_chchf_romancath)]
data_wide$p_chchf_christcath[is.na(data_wide$p_chchf_christcath)] <- gender_religion$p_chchf_christcath[matches_municipality][is.na(data_wide$p_chchf_christcath)]
data_wide$p_chchf_christortho[is.na(data_wide$p_chchf_christortho)] <- gender_religion$p_chchf_christortho[matches_municipality][is.na(data_wide$p_chchf_christortho)]
data_wide$p_chchf_christother[is.na(data_wide$p_chchf_christother)] <- gender_religion$p_chchf_christother[matches_municipality][is.na(data_wide$p_chchf_christother)]
data_wide$p_chchf_jewish[is.na(data_wide$p_chchf_jewish)] <- gender_religion$p_chchf_jewish[matches_municipality][is.na(data_wide$p_chchf_jewish)]
data_wide$p_chchf_muslim[is.na(data_wide$p_chchf_muslim)] <- gender_religion$p_chchf_muslim[matches_municipality][is.na(data_wide$p_chchf_muslim)]
data_wide$p_chchf_religionother[is.na(data_wide$p_chchf_religionother)] <- gender_religion$p_chchf_religionother[matches_municipality][is.na(data_wide$p_chchf_religionother)]
data_wide$p_chchf_atheist[is.na(data_wide$p_chchf_atheist)] <- gender_religion$p_chchf_atheist[matches_municipality][is.na(data_wide$p_chchf_atheist)]
data_wide$p_chchf_religion_undisclosed[is.na(data_wide$p_chchf_religion_undisclosed)] <- gender_religion$p_chchf_religion_undisclosed[matches_municipality][is.na(data_wide$p_chchf_religion_undisclosed)]
#check for nas
which(is.na(data_wide$p_chchf_atheist))
#fuzzy match for the win
#find rows with NA values in the specified columns
na_rows_gerel <- which(is.na(data_wide$p_chchm_total))
#create a new dataset with only NA rows from data_wide
data_wide_na_gerel <- data_wide[na_rows_gerel, ]
#perform fuzzy matching based on Jaccard similarity
fuzzy_match_jaccard <- function(x, y) {
distances <- stringdist::stringdistmatrix(x, y, method = "jaccard")
#find the index of the minimum distance for each row
index <- apply(distances, 1, which.min)
#extract the corresponding values from y
matched_values <- y[index]
return(matched_values)
}
#loop through each row of data_wide_na_gerel and fill NA values
for (i in 1:nrow(data_wide_na_gerel)) {
# Extract municipality from data_wide_na_gerel
municipality <- data_wide_na_gerel$municipality[i]
#perform fuzzy match for municipality
matched_municipality <- fuzzy_match_jaccard(municipality, gender_religion$mnname)
#update data_wide with matched values only where there are NA values
if (!is.na(matched_municipality)) {
data_wide$p_chchm_total[na_rows_gerel[i]] <- gender_religion$p_chchm_total[gender_religion$mnname == matched_municipality]
data_wide$p_chchm_protest[na_rows_gerel[i]] <- gender_religion$p_chchm_protest[gender_religion$mnname == matched_municipality]
data_wide$p_chchm_romancath[na_rows_gerel[i]] <- gender_religion$p_chchm_romancath[gender_religion$mnname == matched_municipality]
data_wide$p_chchm_christcath[na_rows_gerel[i]] <- gender_religion$p_chchm_christcath[gender_religion$mnname == matched_municipality]
data_wide$p_chchm_christortho[na_rows_gerel[i]] <- gender_religion$p_chchm_christortho[gender_religion$mnname == matched_municipality]
data_wide$p_chchm_christother[na_rows_gerel[i]] <- gender_religion$p_chchm_christother[gender_religion$mnname == matched_municipality]
data_wide$p_chchm_jewish[na_rows_gerel[i]] <- gender_religion$p_chchm_jewish[gender_religion$mnname == matched_municipality]
data_wide$p_chchm_muslim[na_rows_gerel[i]] <- gender_religion$p_chchm_muslim[gender_religion$mnname == matched_municipality]
data_wide$p_chchm_religionother[na_rows_gerel[i]] <- gender_religion$p_chchm_religionother[gender_religion$mnname == matched_municipality]
data_wide$p_chchm_atheist[na_rows_gerel[i]] <- gender_religion$p_chchm_atheist[gender_religion$mnname == matched_municipality]
data_wide$p_chchm_religion_undisclosed[na_rows_gerel[i]] <- gender_religion$p_chchm_religion_undisclosed[gender_religion$mnname == matched_municipality]
data_wide$p_chchf_total[na_rows_gerel[i]] <- gender_religion$p_chchf_total[gender_religion$mnname == matched_municipality]
data_wide$p_chchf_protest[na_rows_gerel[i]] <- gender_religion$p_chchf_protest[gender_religion$mnname == matched_municipality]
data_wide$p_chchf_romancath[na_rows_gerel[i]] <- gender_religion$p_chchf_romancath[gender_religion$mnname == matched_municipality]
data_wide$p_chchf_christcath[na_rows_gerel[i]] <- gender_religion$p_chchf_christcath[gender_religion$mnname == matched_municipality]
data_wide$p_chchf_christortho[na_rows_gerel[i]] <- gender_religion$p_chchf_christortho[gender_religion$mnname == matched_municipality]
data_wide$p_chchf_christother[na_rows_gerel[i]] <- gender_religion$p_chchf_christother[gender_religion$mnname == matched_municipality]
data_wide$p_chchf_jewish[na_rows_gerel[i]] <- gender_religion$p_chchf_jewish[gender_religion$mnname == matched_municipality]
data_wide$p_chchf_muslim[na_rows_gerel[i]] <- gender_religion$p_chchf_muslim[gender_religion$mnname == matched_municipality]
data_wide$p_chchf_religionother[na_rows_gerel[i]] <- gender_religion$p_chchf_religionother[gender_religion$mnname == matched_municipality]
data_wide$p_chchf_atheist[na_rows_gerel[i]] <- gender_religion$p_chchf_atheist[gender_religion$mnname == matched_municipality]
data_wide$p_chchf_religion_undisclosed[na_rows_gerel[i]] <- gender_religion$p_chchf_religion_undisclosed[gender_religion$mnname == matched_municipality]
}
}
which(is.na(data_wide$p_chchf_atheist))
#create the religion share of each municipality
data_wide <- data_wide %>%
rowwise() %>%
mutate(p_ch_protest = p_chchm_protest + p_chchf_protest,
p_ch_romancath = p_chchm_romancath + p_chchf_romancath,
p_ch_christcath = p_chchm_christcath + p_chchf_christcath,
p_ch_christortho = p_chchm_christortho + p_chchf_christortho,
p_ch_christother = p_chchm_christother + p_chchf_christother,
p_ch_jewish = p_chchm_jewish + p_chchf_jewish,
p_ch_muslim = p_chchm_muslim + p_chchf_muslim,
p_ch_religionother = p_chchm_religionother + p_chchf_religionother,
p_ch_atheist = p_chchm_atheist + p_chchf_atheist,
p_ch_religion_undisclosed = p_chchm_religion_undisclosed + p_chchf_religion_undisclosed
) %>%
ungroup()
#create binary for male vs. female (due to collinearity)
data_wide <- data_wide %>%
mutate(gender_mn = ifelse(p_chchf_total >= 50, 1, 0))
which(is.na(data_wide$p_chchm_total))
###Disaster Data matching
disaster <- read.xlsx('Data_Sources/data_disaster_1995_2022.xlsx')
disaster$date <- as.Date(disaster$date, origin = "1899-12-30")
#initialising empty vectors to store matched values
disaster_ID <- rep(NA, nrow(data_wide))
disaster_date <- rep(NA, nrow(data_wide))
main_process <- rep(NA, nrow(data_wide))
damage_extent <- rep(NA, nrow(data_wide))
treated <- rep(NA, nrow(data_wide))
#looping over each row of data_wide
for (i in seq_len(nrow(data_wide))) {
# Define the range of dates to consider
date_range <- data_wide$date[i] - 365
#matching indices based on mncode and date criteria within the defined date range
match_indices <- which(data_wide$mncode[i] == disaster$mncode &
disaster$date <= data_wide$date[i] &
disaster$date >= date_range)
#assigning values if there are matches
if (length(match_indices) > 0) {
disaster_ID[i] <- disaster$ID[match_indices]
disaster_date[i] <- disaster$date[match_indices]
main_process[i] <- disaster$main_process[match_indices]
damage_extent[i] <- disaster$damage_extent[match_indices]
treated[i] <- disaster$treated[match_indices]
}
}
#matching values to data_wide
data_wide$disaster_ID <- disaster_ID
data_wide$disaster_date <- disaster_date
data_wide$main_process <- main_process
data_wide$damage_extent <- damage_extent
data_wide$treated <- treated
which(is.na(data_wide$treated)) #33858 NA
#step 2: matching with mnname
#initialising empty vectors to store matched values
disaster_ID2 <- rep(NA, nrow(data_wide))
disaster_date2 <- rep(NA, nrow(data_wide))
main_process2 <- rep(NA, nrow(data_wide))
damage_extent2 <- rep(NA, nrow(data_wide))
treated2 <- rep(NA, nrow(data_wide))
#matching loop
for (i in seq_len(nrow(data_wide))) {
#checking if data_wide$treated is NA
if(is.na(data_wide$treated[i])) {
#defining the range of dates to consider
date_range <- data_wide$date[i] - 365
#matching indices based on mnname and date criteria within the defined date range
match_indices2 <- which(data_wide$municipality[i] == disaster$mnname &
disaster$date <= data_wide$date[i] &
disaster$date >= date_range)
#assign values if there are matches
if (length(match_indices2) > 0) {
disaster_ID2[i] <- disaster$ID[match_indices2]
disaster_date2[i] <- disaster$date[match_indices2]
main_process2[i] <- disaster$main_process[match_indices2]
damage_extent2[i] <- disaster$damage_extent[match_indices2]
treated2[i] <- disaster$treated[match_indices2]
}
}
}
#matching values to data_wide only if treated is NA
data_wide$disaster_ID[is.na(data_wide$treated)] <- disaster_ID2[is.na(data_wide$treated)]
data_wide$disaster_date[is.na(data_wide$treated)] <- disaster_date2[is.na(data_wide$treated)]
data_wide$main_process[is.na(data_wide$treated)] <- main_process2[is.na(data_wide$treated)]
data_wide$damage_extent[is.na(data_wide$treated)] <- damage_extent2[is.na(data_wide$treated)]
data_wide$treated[is.na(data_wide$treated)] <- treated2[is.na(data_wide$treated)]
which(is.na(data_wide$treated)) #33744
#daycounter disaster to votedate
data_wide$disaster_treat_daycount <- ifelse(is.na(data_wide$disaster_date), 0, as.numeric(data_wide$date - data_wide$disaster_date))
###daycounter after event for all votes within mncode
# Convert character dates to Date objects
data_wide$date <- as.Date(data_wide$date)
data_wide$disaster_date <- as.Date(data_wide$disaster_date)
#daycount to monthcount
data_wide$disaster_treat_daycount <- round(data_wide$disaster_treat_daycount/30.44)
data_wide <- data_wide %>%
rename(disaster_treat_monthcount = disaster_treat_daycount)
# Convert numeric dates to Date objects
data_wide$date <- as.Date(as.character(data_wide$date), format = "%Y-%m-%d")
data_wide$disaster_date <- as.Date(as.character(data_wide$disaster_date), format = "%Y-%m-%d")
#coding damage extent
data_wide <- data_wide %>%
mutate(damage_extent = case_when(
is.na(damage_extent) ~ "0",
damage_extent == "dmgLOW" ~ "1",
damage_extent == "dmgMEDIUM" ~ "2",
damage_extent == "dmgHIGH" ~ "3",
TRUE ~ as.character(damage_extent)  # Keep other values unchanged
))
#final steps
#treated to 0
data_wide$treated[is.na(data_wide$treated)] <- 0
data_wide$disaster_treat_monthcount[is.na(data_wide$disaster_treat_monthcount)]
###tidying up
#deleting Schweiz as control for setup
data_wide <- data_wide[data_wide$municipality != "Schweiz", ]
#getting rid of unused columns
delete_columns <- c("composite_key", "composite_key2", "composite_key3",
"composite_key4", "composite_key5", "composite_key6",
"average_ja_in_percent", "n_0_to_30", "n_30_to_40",
"n_40_to_50", "n_50_to_75", "n_75_to_open", "n_total",
"canton_edu_pax_total", "edu_basic_pax_total", "edu_matura_pax_total",
"edu_tert_pax_total", "canton_edu_male_total", "edu_male_basic_pax_total",
"edu_male_matura_pax", "edu_male_tert_pax", "canton_edu_female_total",
"edu_female_basic_pax_total", "edu_female_matura_pax",
"age_total", "0-17", "18-30",
"31-45", "46-65", "66-85", "86-100", "comp_key_edu",
"comp_key_edu2")
data_wide <- select(data_wide, -one_of(delete_columns))
#to numerical
non_numeric_cols <- c("vote", "municipality", "date", "canton", "disaster_date", "main_process")
numeric_cols <- names(data_wide)[!names(data_wide) %in% non_numeric_cols]
data_wide[, numeric_cols] <- lapply(data_wide[, numeric_cols], function(x) as.numeric(as.character(x)))
#to character
data_wide$damage_extent <- as.character(data_wide$damage_extent)
data_wide$gender_mn <- as.character(data_wide$gender_mn)
#last to % changes
data_wide <- data_wide %>%
mutate(
atert_share = atert_share / 100,
atertII_share = atertII_share / 100)
data_wide <- data_wide %>%
mutate(
btert_share = btert_share / 100,
btertII_share = btertII_share / 100)
# Specify the file name
data_complete_ch <- "data_complete_ch.xlsx"
# Write data_wide to an Excel file in the specified directory
write.xlsx(data_wide, data_complete_ch)
#remove objects
rm(list=ls())
#detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices",
"package:utils", "package:datasets", "package:methods",
"package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1,
TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list)
detach(package,  character.only=TRUE)
}
detachAllPackages()
#load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
#load any necessary packages/libraries
lapply(c('pxR', 'openxlsx', 'sp', 'tidyr', 'lubridate', 'stringdist',
'dplyr', 'zoo', 'lubridate'),  pkgTest)
#setting the working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
#File with all votes from Switzerland
#read px and create dataframe
px <- read.px( 'Data_Sources/data_votes_ch.px' )
data   <-  as.data.frame(px)
#renaming columns
colnames(data) <- c('result', 'date_vote', 'municipality', 'value')
View(data)
#extracting date of votings
data$date <- gsub('^(\\d{4}-\\d{2}-\\d{2}).*', '\\1', data$date_vote)
data$date_vote <- gsub('\\d{4}-\\d{2}-\\d{2}\\s*', '', data$date_vote)
colnames(data) <- c('result', 'vote', 'municipality', 'value', 'date')
#convert Date to Date type
data$date <- as.Date(data$date)
###narrow down to the votes defined (environmental votes)
#define the votes to keep
keepvotes <- c(
"Bundesgesetz über die Ziele im Klimaschutz, die Innovation und die Stärkung der Energiesicherheit (KlG)",
"Bundesgesetz über die Verminderung von Treibhausgasemissionen (CO2-Gesetz)",
"Bundesbeschluss über die Genehmigung des Umfassenden Wirtschaftspartnerschaftsabkommens zwischen den EFTA-Staaten und Indonesien",
"Energiegesetz (EnG)",
"Volksinitiative «Für den geordneten Ausstieg aus der Atomenergie»",
"Volksinitiative «Für eine nachhaltige und ressourceneffiziente Wirtschaft (Grüne Wirtschaft)»",
"Volksinitiative «Energie- statt Mehrwertsteuer»",
"Volksinitiative «Verbandsbeschwerderecht: Schluss mit der Verhinderungspolitik - Mehr Wachstum für die Schweiz!»",
"Gegenentwurf zur Volksinitiative «Avanti - für sichere und leistungsfähige Autobahnen»",
"Volksinitiative «Strom ohne Atom - Für eine Energiewende und die schrittweise Stilllegung der Atomkraftwerke»",
"Volksinitiative «für einen autofreien Sonntag pro Jahreszeit - ein Versuch für vier Jahre»",
"Elektrizitätsmarktgesetz",
"Volksinitiative «für eine gesicherte AHV - Energie statt Arbeit besteuern!»",
"Volksinitiative «für mehr Verkehrssicherheit durch Tempo 30 innerorts mit Ausnahmen (Strassen für alle)»",
"Verfassungsartikel über eine Energielenkungsabgabe für die Umwelt",
"Verfassungsartikel über eine Förderabgabe für erneuerbare Energien",
"Volksinitiative «für einen Solarrappen»",
"Volksinitiative «für die Halbierung des motorisierten Strassenverkehrs zur Erhaltung und Verbesserung von Lebensräumen (Verkehrshalbierungs-Initiative)»",
"Bundesgesetz über eine leistungsabhängige Schwerverkehrsabgabe"
)
#subset dataframe to keep only rows with exact terms
data <- data[data$vote %in% keepvotes, ]
#long to wide
#pivot the dataframe to wide format
data_wide <- pivot_wider(data, names_from = result, values_from = value)
View(data_wide)
#codes for votes
unique_votes <- unique(data_wide$vote)
for (i in 1:length(unique_votes)) {
data_wide <- mutate(data_wide, !!paste0("vote", i) := as.numeric(vote == unique_votes[i]))
}
start_code <- 100
vote_code_mapping <- setNames(start_code + seq_along(unique_votes), unique_votes)
data_wide$vote_code <- vote_code_mapping[data_wide$vote]
#change YES to NO interpretation
yestono <- data_wide$vote %in% c("Bundesbeschluss über die Genehmigung des Umfassenden Wirtschaftspartnerschaftsabkommens zwischen den EFTA-Staaten und Indonesien",
"Volksinitiative «Für den geordneten Ausstieg aus der Atomenergie»",
"Volksinitiative «Verbandsbeschwerderecht: Schluss mit der Verhinderungspolitik - Mehr Wachstum für die Schweiz!»",
"Volksinitiative «Strom ohne Atom - Für eine Energiewende und die schrittweise Stilllegung der Atomkraftwerke»",
"Gegenentwurf zur Volksinitiative «Avanti - für sichere und leistungsfähige Autobahnen»")
data_wide$`Ja in %`[yestono] <- 100 - data_wide$`Ja in %`[yestono]
#creating the year
data_wide$year <- year(data_wide$date)
#creating mean difference yes_vote
average_ja_in_percent <- data_wide %>%
group_by(vote_code) %>%
summarise(average_ja_in_percent = mean(`Ja in %`, na.rm = TRUE))
data_wide <- data_wide %>%
left_join(average_ja_in_percent, by = "vote_code") %>%
mutate(yes_vote_meanD = `Ja in %` - average_ja_in_percent)
# Subset the dataframe where municipality = "Schweiz"
subset_data <- subset(data_wide, municipality == "Schweiz")
# Save the subset as an Excel file
write.xlsx(subset_data, "subset_data.xlsx")
#File with all votes from Switzerland
#read px and create dataframe
px <- read.px( 'Data_Sources/data_votes_ch.px' )
data   <-  as.data.frame(px)
#renaming columns
colnames(data) <- c('result', 'date_vote', 'municipality', 'value')
#extracting date of votings
data$date <- gsub('^(\\d{4}-\\d{2}-\\d{2}).*', '\\1', data$date_vote)
data$date_vote <- gsub('\\d{4}-\\d{2}-\\d{2}\\s*', '', data$date_vote)
colnames(data) <- c('result', 'vote', 'municipality', 'value', 'date')
#convert Date to Date type
data$date <- as.Date(data$date)
###narrow down to the votes defined (environmental votes)
#define the votes to keep
keepvotes <- c(
"Bundesgesetz über die Ziele im Klimaschutz, die Innovation und die Stärkung der Energiesicherheit (KlG)",
"Bundesgesetz über die Verminderung von Treibhausgasemissionen (CO2-Gesetz)",
"Bundesbeschluss über die Genehmigung des Umfassenden Wirtschaftspartnerschaftsabkommens zwischen den EFTA-Staaten und Indonesien",
"Energiegesetz (EnG)",
"Volksinitiative «Für den geordneten Ausstieg aus der Atomenergie»",
"Volksinitiative «Für eine nachhaltige und ressourceneffiziente Wirtschaft (Grüne Wirtschaft)»",
"Volksinitiative «Energie- statt Mehrwertsteuer»",
"Volksinitiative «Verbandsbeschwerderecht: Schluss mit der Verhinderungspolitik - Mehr Wachstum für die Schweiz!»",
"Gegenentwurf zur Volksinitiative «Avanti - für sichere und leistungsfähige Autobahnen»",
"Volksinitiative «Strom ohne Atom - Für eine Energiewende und die schrittweise Stilllegung der Atomkraftwerke»",
"Volksinitiative «für einen autofreien Sonntag pro Jahreszeit - ein Versuch für vier Jahre»",
"Elektrizitätsmarktgesetz",
"Volksinitiative «für eine gesicherte AHV - Energie statt Arbeit besteuern!»",
"Volksinitiative «für mehr Verkehrssicherheit durch Tempo 30 innerorts mit Ausnahmen (Strassen für alle)»",
"Verfassungsartikel über eine Energielenkungsabgabe für die Umwelt",
"Verfassungsartikel über eine Förderabgabe für erneuerbare Energien",
"Volksinitiative «für einen Solarrappen»",
"Volksinitiative «für die Halbierung des motorisierten Strassenverkehrs zur Erhaltung und Verbesserung von Lebensräumen (Verkehrshalbierungs-Initiative)»",
"Bundesgesetz über eine leistungsabhängige Schwerverkehrsabgabe"
)
#subset dataframe to keep only rows with exact terms
data <- data[data$vote %in% keepvotes, ]
#long to wide
#pivot the dataframe to wide format
data_wide <- pivot_wider(data, names_from = result, values_from = value)
#codes for votes
unique_votes <- unique(data_wide$vote)
for (i in 1:length(unique_votes)) {
data_wide <- mutate(data_wide, !!paste0("vote", i) := as.numeric(vote == unique_votes[i]))
}
# Subset the dataframe where municipality = "Schweiz"
subset_data <- subset(data_wide, municipality == "Schweiz")
# Save the subset as an Excel file
write.xlsx(subset_data, "subset1_data.xlsx")
